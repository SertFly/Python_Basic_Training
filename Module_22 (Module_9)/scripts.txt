print('Задача 2. Долги')

# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который,
# возможно, разбудит его совесть.

# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран
# сообщение, где имя повторяется несколько раз (и долг, возможно, тоже). Используйте
# числа в названиях ключей.

friend_name = input('Введите имя должника: ')
credit_amount = int(input('Сумма долга: '))

print(f'Привет, {friend_name}! Как твои дела, {friend_name}? Как поживают мои {credit_amount} рублей? '
      f'Когда ты, {friend_name}, вернешь мне мои любимые {credit_amount} рублей?' )

********************************************************************************

print('Задача 1. Улучшенная лингвистика 2')

# Усовершенствуйте старую программу:

# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится
# сам текст произведения, который вводится уже в одну строку. Напишите программу,
# которая посчитает, сколько раз слова пользователя встречаются в тексте.

check_wordlist = [input('Введите слово для анализа: ') for _ in range(3)]
text = input('Введите текст для анализа: ').split()

counter = [text.count(word) for word in check_wordlist]
print('\nРезультаты:')
print([str(check_wordlist[i]) + ' ' + str(counter[i]) for i in range(3)])




********************************************************************************

print('Задача 2. Путь к файлу')

# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.

# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
userDisk = input('Выберите диск: ')
fileExtension = input('Введите расширение файла: ')
file_path = input('Введите абсолютный путь к файлу: ')
if file_path.startswith(userDisk) and file_path.endswith(fileExtension):
    print('Путь к файлу правильный')
else:
    print('Путь к файлу неверный')

********************************************************************************

print('Задача 3. IP-адрес')

# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каж
# дое число находится в диапазоне от 0 до 255 (включительно).

# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0

# Напишите программу, которая получает на вход 4 числа и выводит на
# экран IP-адрес. Используйте переменную ip_address в качестве шаблона.
# Обеспечьте контроль ввода.

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input(f'Введите {count + 1}-е число из IP-адреса: '))
    if 0 <= new_number <= 255:
        numbers.append(new_number)
        count += 1
print(f'IP адрес: {ip_address}'.format(*numbers))



********************************************************************************

print('Задача 3. IP-адрес')

# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каж
# дое число находится в диапазоне от 0 до 255 (включительно).

# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0

# Напишите программу, которая получает на вход 4 числа и выводит на
# экран IP-адрес. Используйте переменную ip_address в качестве шаблона.
# Обеспечьте контроль ввода.

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input(f'Введите {count + 1}-е число из IP-адреса: '))
    if 0 <= new_number <= 255:
        numbers.append(new_number)
        count += 1
print(f'IP адрес: {ip_address}'.format(*numbers))



********************************************************************************

print('Задача 3. Разделители символов')

# Человек хочет сделать рассылку поздравлений для определённого списка людей.
# Поздравления для разных людей он хочет написать по-разному.

# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)

# В конце программа выводит поздравления и всех именинников в одну строку
# вместе с их возрастом.

while True:
    congrats_template = input('Введите текст поздравления с использованием конструкций '
                              '{name} и {age}: '
                              )
    if '{name}' in congrats_template and '{age}' in congrats_template:
        break
    print('Неправильный шаблон поздравления: отсутствует одна или две конструкции.')

while True:
    names_list = input('Введите имена через запятую: ').split(', ')
    ages_list = input('Введите возраст каждого через пробел: ').split()
    ages = [int(i_num) for i_num in ages_list]
    if len(names_list) == len(ages):
        break
    print('Проверьте данные, список имен не соответствует списку возрастов.')

for i_man in range(len(names_list)):
    print(congrats_template.format(name=names_list[i_man], age=ages[i_man]))

print([' - '.join([names_list[i], str(ages_list[i])]) for i in range(len(names_list))])


********************************************************************************

print('Задача 1. Шифр Цезаря 2')

# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на
# следующую по алфавиту через K позиций по кругу.

# Напишите (модифицируйте) программу, которая реализует этот алгоритм
# шифрования. Не используйте конкатенацию и сделайте так, чтобы текст
# был в одном регистре.

text = input('\nВведите текст: ')
shift = int(input('Введите сдвиг: '))

alphabet = [chr(index) for index in range(ord('а'), ord('я') + 1)]  # заполняем список буквами алфавита

new_text = [alphabet[(alphabet.index(symbol) + shift) % len(alphabet)] if symbol in alphabet
            else symbol for symbol in text.lower()]
print(''.join(new_text))  # объединяем без пробелов


********************************************************************************

print('Задача 1. Заказ')

# После того как человек сделал заказ в интернет-магазине, ему на почту приходит
# оповещение с его именем и номером заказа.

# Напишите программу, которая получает на вход имя и код заказа, а затем выводит
# на экран соответствующее сообщение. Для решения используйте строковый метод format.

user = input('Введите имя пользователя: ')
order_number = input('Введите номер заказа: ')

print('Здравствуйте, {user_name}! Ваш номер заказа {order}. Приятного дня!'.format(
    user_name=user,
    order=order_number
))


********************************************************************************

print('Задача 1. Заказ')

# После того как человек сделал заказ в интернет-магазине, ему на почту приходит
# оповещение с его именем и номером заказа.

# Напишите программу, которая получает на вход имя и код заказа, а затем выводит
# на экран соответствующее сообщение. Для решения используйте строковый метод format.

user = input('Введите имя пользователя: ')
order_number = input('Введите номер заказа: ')

print('Здравствуйте, {user_name}! Ваш номер заказа {order}. Приятного дня!'.format(
    user_name=user,
    order=order_number
))


********************************************************************************

print('Задача 3. Удаление части')

# На вход в программу подаётся строка, состоящая из прописных и заглавных букв кириллицы.
# Напишите код, который проверяет, каких букв в строке больше, прописных или заглавных.
# Если заглавных букв больше, то сделать все буквы строки заглавными, иначе сделать все
# прописными.

# Подсказка: используйте методы islower() и/или isupper().

text = input('Введите текст: ')
lower_counter = len([1 for symbol in text if symbol.islower() == True])
upper_counter = len([1 for symbol in text if symbol.isupper() == True])
if lower_counter > upper_counter:
    print('Результат:', text.lower())
else:
    print('Результат:', text.upper())


********************************************************************************

print('Задача 2. Путь к файлу')

# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.

# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
userDisk = input('Выберите диск: ')
fileExtension = input('Введите расширение файла: ')
file_path = input('Введите абсолютный путь к файлу: ')
if file_path.startswith(userDisk) and file_path.endswith(fileExtension):
    print('Путь к файлу правильный')
else:
    print('Путь к файлу неверный')

********************************************************************************

print('Задача 1. Улучшенная лингвистика 2')

# Усовершенствуйте старую программу:

# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится
# сам текст произведения, который вводится уже в одну строку. Напишите программу,
# которая посчитает, сколько раз слова пользователя встречаются в тексте.

check_wordlist = [input('Введите слово для анализа: ') for _ in range(3)]
text = input('Введите текст для анализа: ').split()

counter = [text.count(word) for word in check_wordlist]
print('\nРезультаты:')
print([str(check_wordlist[i]) + ' ' + str(counter[i]) for i in range(3)])




********************************************************************************

print('Задача 2. Долги')

# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который,
# возможно, разбудит его совесть.

# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран
# сообщение, где имя повторяется несколько раз (и долг, возможно, тоже). Используйте
# числа в названиях ключей.

friend_name = input('Введите имя должника: ')
credit_amount = int(input('Сумма долга: '))

print(f'Привет, {friend_name}! Как твои дела, {friend_name}? Как поживают мои {credit_amount} рублей? '
      f'Когда ты, {friend_name}, вернешь мне мои любимые {credit_amount} рублей?' )

********************************************************************************

print('Задача 1. Шифр Цезаря 2')

# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на
# следующую по алфавиту через K позиций по кругу.

# Напишите (модифицируйте) программу, которая реализует этот алгоритм
# шифрования. Не используйте конкатенацию и сделайте так, чтобы текст
# был в одном регистре.

text = input('\nВведите текст: ')
shift = int(input('Введите сдвиг: '))

alphabet = [chr(index) for index in range(ord('а'), ord('я') + 1)]  # заполняем список буквами алфавита

new_text = [alphabet[(alphabet.index(symbol) + shift) % len(alphabet)] if symbol in alphabet
            else symbol for symbol in text.lower()]
print(''.join(new_text))  # объединяем без пробелов


********************************************************************************

print('Задача 3. Удаление части')

# На вход в программу подаётся строка, состоящая из прописных и заглавных букв кириллицы.
# Напишите код, который проверяет, каких букв в строке больше, прописных или заглавных.
# Если заглавных букв больше, то сделать все буквы строки заглавными, иначе сделать все
# прописными.

# Подсказка: используйте методы islower() и/или isupper().

text = input('Введите текст: ')
lower_counter = len([1 for symbol in text if symbol.islower() == True])
upper_counter = len([1 for symbol in text if symbol.isupper() == True])
if lower_counter > upper_counter:
    print('Результат:', text.lower())
else:
    print('Результат:', text.upper())


********************************************************************************

print('Задача 2. Бабушка')

# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить
# в самом телефоне, поэтому обратился к вам за помощью.

# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке
# все идущие подряд пробелы в один и выводит результат на экран.

text = input('Введите текст сообщения: ').split()
print(' '.join(text))


********************************************************************************

print('Задача 2. Бабушка')

# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить
# в самом телефоне, поэтому обратился к вам за помощью.

# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке
# все идущие подряд пробелы в один и выводит результат на экран.

text = input('Введите текст сообщения: ').split()
print(' '.join(text))


********************************************************************************

print('Задача 3. Разделители символов')

# Человек хочет сделать рассылку поздравлений для определённого списка людей.
# Поздравления для разных людей он хочет написать по-разному.

# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)

# В конце программа выводит поздравления и всех именинников в одну строку
# вместе с их возрастом.

while True:
    congrats_template = input('Введите текст поздравления с использованием конструкций '
                              '{name} и {age}: '
                              )
    if '{name}' in congrats_template and '{age}' in congrats_template:
        break
    print('Неправильный шаблон поздравления: отсутствует одна или две конструкции.')

while True:
    names_list = input('Введите имена через запятую: ').split(', ')
    ages_list = input('Введите возраст каждого через пробел: ').split()
    ages = [int(i_num) for i_num in ages_list]
    if len(names_list) == len(ages):
        break
    print('Проверьте данные, список имен не соответствует списку возрастов.')

for i_man in range(len(names_list)):
    print(congrats_template.format(name=names_list[i_man], age=ages[i_man]))

print([' - '.join([names_list[i], str(ages_list[i])]) for i in range(len(names_list))])


********************************************************************************

print('Задача 2. Сообщение')
# Илья решил безобидно подшутить над другом и написал программу для смартфона, которая
# при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному
# добавляет ещё один дополнительный.

# Пользователь вводит строку и дополнительный символ. Напишите программу, которая
# генерирует два списка: в первом списке каждый элемент — удвоенная буква первой строки,
# во втором списке каждый элемент — конкатенация элемента первого списка и дополнительного
# символа.

text = input('Текст сообщения: ')
secret_symbol = input('Секретный символ: ')

list_1 = [symbol + symbol for symbol in text]
list_2 = [i_list_1 + secret_symbol for i_list_1 in list_1]

print(list_1)
print(list_2)


********************************************************************************

print('Задача 3. Повышение цен')

# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе
# знать, мы спрогнозировали, что через год придётся повышать цены на X процентов, а ещё
# через один год — ещё на Y процентов.

# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую
# сумму стоимости товаров за каждый год.

goods_list = [float(input('Введите цену за товар: ')) for i in range(5)]
first_year_percent = float(input('Процент повышения за первый год: '))
second_year_percent = float(input('Процент повышения за второй год: '))

print('Полная цена за год:', round(sum(goods_list), 2), round(sum(goods_list) * (100 + first_year_percent)/100, 2),
      round((sum(goods_list) * (100 + first_year_percent)/100) * (100 + second_year_percent)/100, 2))


********************************************************************************

print('Задача 3. Повышение цен')

# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе
# знать, мы спрогнозировали, что через год придётся повышать цены на X процентов, а ещё
# через один год — ещё на Y процентов.

# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую
# сумму стоимости товаров за каждый год.

goods_list = [float(input('Введите цену за товар: ')) for i in range(5)]
first_year_percent = float(input('Процент повышения за первый год: '))
second_year_percent = float(input('Процент повышения за второй год: '))

print('Полная цена за год:', round(sum(goods_list), 2), round(sum(goods_list) * (100 + first_year_percent)/100, 2),
      round((sum(goods_list) * (100 + first_year_percent)/100) * (100 + second_year_percent)/100, 2))


********************************************************************************

import random

print('Задача 3. Отряды')

# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать
# небольшую логику поведения некоторых отрядов, а также их урон. Есть два отряда,
# в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на
# третий, также из 10 юнитов. Юнит третьего отряда погибает, если сумма урона от
# двух монстров больше 100.

# Напишите программу, которая генерирует случайные значения в первых двух списках
# в заданных диапазонах, а также генерирует список, состоящий из фраз «Погиб» или
# «Выжил». Выведите все списки на экран.

first_squad = [random.randint(50, 80) for x in range(10)]
second_squad = [random.randint(30, 60) for x in range(10)]

third_squad_final = ['Погиб' if first_squad[i] + second_squad[i] > 100 else 'Выжил' for i in range(10)]
print('\nПервый отряд: ', first_squad)
print('Второй отряд: ', second_squad)
print('Что случилось с третьим отрядом: ', third_squad_final)




********************************************************************************

print('Задача 2. Срезы')

# Дан список чисел:
nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

# Напишите программу, которая выводит на экран шесть ответов:
#
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.

# Для решения используйте только срезы (и без функции len).

print('\nРезультаты: ')
print('1)', nums[0:5])
print('2)', nums[0:8])
print('3)', nums[0:10:2])
print('4)', nums[1:10:2])
print('5)', nums[::-1])
print('6)', nums[::-2])



********************************************************************************

print('Задача 1. Кубы и квадраты')

# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом
# же диапазоне. Выведите списки на экран. Для генерации используйте list comprehensions
# (как и в следующих задачах).

left_border = int(input('\nЛевая граница: '))
right_border = int(input('Правая граница: '))

print(f'\nСписок квадратов чисел в диапазоне от {left_border} до {right_border}:',
      [i ** 2 for i in range(left_border, right_border + 1)])
print(f'Список кубов чисел в диапазоне от {left_border} до {right_border}:',
      [i ** 3 for i in range(left_border, right_border + 1)])

********************************************************************************

print('Задача 2. Сообщение')
# Илья решил безобидно подшутить над другом и написал программу для смартфона, которая
# при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному
# добавляет ещё один дополнительный.

# Пользователь вводит строку и дополнительный символ. Напишите программу, которая
# генерирует два списка: в первом списке каждый элемент — удвоенная буква первой строки,
# во втором списке каждый элемент — конкатенация элемента первого списка и дополнительного
# символа.

text = input('Текст сообщения: ')
secret_symbol = input('Секретный символ: ')

list_1 = [symbol + symbol for symbol in text]
list_2 = [i_list_1 + secret_symbol for i_list_1 in list_1]

print(list_1)
print(list_2)


********************************************************************************

print('Задача 2. Магазин')

# У нас есть вот такой список цен на некоторые товары из магазина:

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала
# к ним минус. Нам нужно это исправить.

# Напишите программу, которая генерирует новый список из первого списка, заменяя
# все отрицательные числа на ноль.

print([i if i > 0 else 0 for i in original_prices])



********************************************************************************

print('Задача 2. Срезы')

# Дан список чисел:
nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

# Напишите программу, которая выводит на экран шесть ответов:
#
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.

# Для решения используйте только срезы (и без функции len).

print('\nРезультаты: ')
print('1)', nums[0:5])
print('2)', nums[0:8])
print('3)', nums[0:10:2])
print('4)', nums[1:10:2])
print('5)', nums[::-1])
print('6)', nums[::-2])



********************************************************************************

print('Задача 1. Список чётных чисел')

# Пользователь вводит два числа: А и В. Реализуйте код, который генерирует список
# из чётных чисел в диапазоне от А до B. Используйте list comprehensions (как и в
# следующих задачах).

print([x for x in range(int(input('\nВведите первое число: ')),
                        int(input('Введите второе число: ')) + 1)
       if x % 2 == 0])


********************************************************************************

import random
print('Задача 1. Анализ цен')

# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя. Для нормальной
# работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их
# зануляет и в конце выводит на экран, сколько денег мы по итогу потеряли.
# Получился вот такой код:

# original_prices = [-12, 3, 5, -2, 1]

original_prices = [random.randint(-100, 100) for i in range(5)]
new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0
print("Мы потеряли:", sum(new_prices) - sum(original_prices))

# Однако при таких входных данных программа почему-то работает неправильно:
# она выводит ответ 0, когда правильный ответ 14. Помогите другу исправить
# программу, а также сделайте так, чтобы список цен генерировался случайно
# (диапазон можно выбрать любой).


********************************************************************************

import random

print('Задача 3. Отряды')

# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать
# небольшую логику поведения некоторых отрядов, а также их урон. Есть два отряда,
# в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на
# третий, также из 10 юнитов. Юнит третьего отряда погибает, если сумма урона от
# двух монстров больше 100.

# Напишите программу, которая генерирует случайные значения в первых двух списках
# в заданных диапазонах, а также генерирует список, состоящий из фраз «Погиб» или
# «Выжил». Выведите все списки на экран.

first_squad = [random.randint(50, 80) for x in range(10)]
second_squad = [random.randint(30, 60) for x in range(10)]

third_squad_final = ['Погиб' if first_squad[i] + second_squad[i] > 100 else 'Выжил' for i in range(10)]
print('\nПервый отряд: ', first_squad)
print('Второй отряд: ', second_squad)
print('Что случилось с третьим отрядом: ', third_squad_final)




********************************************************************************

print('Задача 1. Кубы и квадраты')

# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом
# же диапазоне. Выведите списки на экран. Для генерации используйте list comprehensions
# (как и в следующих задачах).

left_border = int(input('\nЛевая граница: '))
right_border = int(input('Правая граница: '))

print(f'\nСписок квадратов чисел в диапазоне от {left_border} до {right_border}:',
      [i ** 2 for i in range(left_border, right_border + 1)])
print(f'Список кубов чисел в диапазоне от {left_border} до {right_border}:',
      [i ** 3 for i in range(left_border, right_border + 1)])

********************************************************************************

import random
print('Задача 1. Анализ цен')

# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя. Для нормальной
# работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их
# зануляет и в конце выводит на экран, сколько денег мы по итогу потеряли.
# Получился вот такой код:

# original_prices = [-12, 3, 5, -2, 1]

original_prices = [random.randint(-100, 100) for i in range(5)]
new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0
print("Мы потеряли:", sum(new_prices) - sum(original_prices))

# Однако при таких входных данных программа почему-то работает неправильно:
# она выводит ответ 0, когда правильный ответ 14. Помогите другу исправить
# программу, а также сделайте так, чтобы список цен генерировался случайно
# (диапазон можно выбрать любой).


********************************************************************************

print('Задача 2. Магазин')

# У нас есть вот такой список цен на некоторые товары из магазина:

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала
# к ним минус. Нам нужно это исправить.

# Напишите программу, которая генерирует новый список из первого списка, заменяя
# все отрицательные числа на ноль.

print([i if i > 0 else 0 for i in original_prices])



********************************************************************************

print('Задача 1. Список чётных чисел')

# Пользователь вводит два числа: А и В. Реализуйте код, который генерирует список
# из чётных чисел в диапазоне от А до B. Используйте list comprehensions (как и в
# следующих задачах).

print([x for x in range(int(input('\nВведите первое число: ')),
                        int(input('Введите второе число: ')) + 1)
       if x % 2 == 0])


********************************************************************************

print('Задача 1. Создание кортежей')

# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав
# тем самым третий кортеж. С помощью метода кортежа определите в нём количество
# нулей. Выведите на экран третий кортеж и количество нулей в нём.
import random

first_tuple = tuple(random.randint(0, 5) for _ in range(10))
print('Первый кортеж:', first_tuple)

second_tuple = tuple(random.randint(-5, 0) for _ in range(10))
print('Второй кортеж:', second_tuple)

third_tuple = first_tuple + second_tuple
print('Объединенный кортеж:', third_tuple)
print('Кол-во нулей в объединенном кортеже:', third_tuple.count(0))


********************************************************************************

print('Задача 2. Сервер')

# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:

server_data = {
    "server": {
        "host": "127.0.0.1",
        "port": "10"
    },
    "configuration": {
        "access": "true",
        "login": "Ivan",
        "password": "qwerty"
    }
}

# Напишите программу, которая выводит для пользователя эти данные так же
# красиво и понятно, как они представлены в словаре.

for i_item, i_details in server_data.items():
    print('\n', i_item, ':')
    for i_name, i_value in i_details.items():
        print('\t', i_name, ':', i_value)

********************************************************************************

print('Задача 3. В одну строчку')

# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4,
# а значения ключей — числа 0, 100, 144, 20 и 19 соответственно. Нужно написать
# программу, которая выводит список тех значений, у которых ключ делится на 2.
# Причём программа должна быть в одну строчку.» Программа у друга работает,
# но её не приняли, так как в ней не используется правило «не повторяйся» —
# это когда части кода не повторяются. Помогите другу исправить решение задачи так,
# чтобы код в строчке не повторялся.


# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])

********************************************************************************

print('Задача 2. Контакты 2')

# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить.

# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и
# номер телефона, добавляет их в словарь и выводит на экран текущий словарь контактов.
# Словарь состоит из пар «Ф. И. — телефон», где Ф. И. — это составной ключ.
# Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения
# программы). Обеспечьте контроль ввода: если этот человек уже есть в словаре,
# то выведите соответствующее сообщение.

contacts = {}
while True:
    last_name = input('\nВведите фамилию или "Готово": ')
    if last_name == 'Готово':
        break
    first_name = input('Введите имя: ')
    if (last_name, first_name) in contacts.keys():
        print('Контакт уже есть в базе. Номер телефона:', contacts[(last_name, first_name)])
        update_info = input('Обновить номер телефона? - Да/Нет ').lower()
        if update_info == 'да':
            contacts[(last_name, first_name)] = input('Введите новый номер: ')
    else:
        contacts[(last_name, first_name)] = input('Введите номер телефона: ')


********************************************************************************

print('Задача 3. Неправильный код')

# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный
# индекс и случайное значение, а затем по этим индексу и значению меняет сам кортеж.
# Функция должна возвращать кортеж и случайное значение.
#
# В основном коде функция используется два раза, и на экран два раза выводится новый
# кортеж и случайное значение. Причём второй раз выводится сумма первого случайного
# значения и второго.
#
# Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с
# описанием.

import random


def change(nums):
    new_nums = list(nums[:])
    index = random.randint(0, 4)
    value = random.randint(100, 1000)
    new_nums[index] = value
    return value, tuple(new_nums)


my_nums = (1, 2, 3, 4, 5)
rand_val_1, new_my_nums = change(my_nums)
print(new_my_nums)
print(rand_val_1)

rand_val_2, new_my_nums_2 = change(new_my_nums)

print(new_my_nums_2)
print(rand_val_1 + rand_val_2)


********************************************************************************

print('Задача 2. Словари из списков')

# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита
# (могут повторяться). Затем для каждого списка создайте словарь из пар
# «индекс — значение» и выведите оба словаря на экран.

import random

list_1 = [random.choice('абвгдеёжзийклмнопрстуфхцчшщъыьэюя') for _ in range(10)]
list_2 = [random.choice('абвгдеёжзийклмнопрстуфхцчшщъыьэюя') for _ in range(10)]

print('Первый список:', list_1)
print('Второй список:', list_2)

dict_1 = {i_index: i_symbol for i_index, i_symbol in enumerate(list_1)}
dict_2 = {i_index: i_symbol for i_index, i_symbol in enumerate(list_2)}

print(dict_1)
print(dict_2)


********************************************************************************

print('Задача 1. Кризис миновал')

# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился.
# И теперь можно вернуться к обыденным делам. Однако внезапно вы обнаружили,
# что старый скрипт, который выводит данные о фруктах, куда-то потерялся.
# Необходимо его восстановить.

# Дан словарь с парами «название фрукта — цена»:
incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

for i_fruit, i_cost in incomes.items():
    print(i_fruit, '--', i_cost)

********************************************************************************

print('Задача 1. Саботаж!')

# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и
# добавил в код сайта символ ~ (тильда). Но программисты быстро решили эту проблему,
# пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и
# выводит в консоль индексы символа ~. Для решения этой задачи (и остальных тоже)
# используйте функцию enumerate.

text = tuple(input('Введите текст: '))
for i_index, i_symbol in enumerate(text):
    if i_symbol == '~':
        print(i_index)
        

********************************************************************************

print('Задача 3. Универсальная программа')


# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд.
# При этом, он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.

# Напишите функцию, которая возвращает список из элементов итерируемого объекта
# (кортежа, строки, списка, словаря), у которых индекс чётный.


def return_even_elements(data):
    result = []
    if isinstance(data, dict):
        data = data.items()
    for index, value in enumerate(data):
        if index % 2 == 0:
            result.append(value)
    return result


print(return_even_elements('О Дивный Новый мир!'))
print(return_even_elements([100, 200, 300, 'буква', 0, 2, 'а']))
print(return_even_elements({0: 'е', 1: 'о', 2: 'ч', 3: 'ы', 4: 'в', 5: 'н', 6: 'д', 7: 'а', 8: 'ш', 9: 'ц'}))


********************************************************************************

print('Задача 1. Паспортные данные')

# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано
# с помощью словаря, состоящего из пар «Серия и номер паспорта — фамилия и имя».
# Серия и номер — составной ключ, а фамилия и имя — составное значение.
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}


seria = int(input('Введите серию паспорта: '))
number = int(input('Введите номер паспорта: '))

if (seria, number) in data.keys():
    print('Фамилия Имя пользователя:', data[(seria, number)])
else:
    print('Пользователь не найден.')


********************************************************************************

print('Задача 2. Цилиндр')

# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.

# Пользователь вводит два значения: радиус и высоту. Напишите функцию для
# расчёта площади боковой поверхности цилиндра и его полной площади.
# Функция должна возвращать два эти значения. После этого в основной
# программе выводятся оба ответа в две строки.

import math


def cylinder_calculation(radius, height):
    side_square = 2 * math.pi * radius * height
    full_square = side_square + 2 * math.pi * radius ** 2
    return side_square, full_square


radius = float(input('Введите радиус цилиндра: '))
height = float(input('Введите высоту цилиндра: '))

side_square, full_square = cylinder_calculation(radius, height)
print('Площадь боковой поверхности цилиндра:', round(side_square, 2))
print('Полная площадь поверхности цилиндра:', round(full_square, 2))


********************************************************************************

print('Задача 2. Сокращения')
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат. Зарплаты
# уже уволенных сотрудников обозначаются в списке числом 0.

# Напишите программу, которая запрашивает у пользователя количество
# сотрудников и их зарплаты, затем удаляет все элементы списка со
# значением 0 и выводит в консоль, сколько сотрудников осталось,
# а также их зарплаты. Дополнительный список использовать нельзя.

# Дополнительно: выведите на экран максимальную и минимальную зарплату
# оставшихся сотрудников. Для этого используйте функции max и min.
# Да, те самые, которыми нельзя называть переменные. В скобках функций
# просто укажите список.

employee = int(input('Кол-во сотрудников: '))
salary = []
for i_employer in range(employee):
    salary.append(int(input(f'Зарплата {i_employer + 1} сотрудника: ')))

for paid_amount in salary:
    if paid_amount == 0:
        salary.remove(0)

print('Осталось сотрудников:', len(salary))
print('Зарплаты:', salary)
print('Минимальная зарплата:', min(salary))
print('Максимальная зарплата:', max(salary))


********************************************************************************

print('Задача 2. Сокращения')
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат. Зарплаты
# уже уволенных сотрудников обозначаются в списке числом 0.

# Напишите программу, которая запрашивает у пользователя количество
# сотрудников и их зарплаты, затем удаляет все элементы списка со
# значением 0 и выводит в консоль, сколько сотрудников осталось,
# а также их зарплаты. Дополнительный список использовать нельзя.

# Дополнительно: выведите на экран максимальную и минимальную зарплату
# оставшихся сотрудников. Для этого используйте функции max и min.
# Да, те самые, которыми нельзя называть переменные. В скобках функций
# просто укажите список.

employee = int(input('Кол-во сотрудников: '))
salary = []
for i_employer in range(employee):
    salary.append(int(input(f'Зарплата {i_employer + 1} сотрудника: ')))

for paid_amount in salary:
    if paid_amount == 0:
        salary.remove(0)

print('Осталось сотрудников:', len(salary))
print('Зарплаты:', salary)
print('Минимальная зарплата:', min(salary))
print('Максимальная зарплата:', max(salary))


********************************************************************************

print('Задача 1. Зоопарк')

# В маленьком зоопарке каждое животное сидит в отдельной клетке,
# всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

# Сегодня в зоопарк завезли медведя (bear) и посадили его между
# львом и кенгуру. В итоге животных стало пять. А через неделю
# слона перевезли в другое место и в списке снова стало
# четверо животных.

# Реализуйте эти действия в коде программы и выведите в консоль
# итоговый список животных, а также покажите, в какой клетке сидят
# лев и обезьяна. Для этого используйте методы списков.

zoo.insert(1, 'bear')
zoo.remove('elephant')
print('Зоопарк:', zoo)
print(f'Лев сидит в клетке {zoo.index("lion") + 1}')
print(f'Обезьяна сидит в клетке {zoo.index("monkey") + 1}')


********************************************************************************

print('Задача 3. Кино')

# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли
# создать собственный рейтинг фильмов из тех, которые есть на сайте. Вот сам список фильмов
# (конечно же, можете брать свои):

films = [
    'Крепкий орешек', 'Назад в будущее', 'Леон', 'Богемская рапсодия',
    'Проклятый остров', 'Начало', 'Матрица', 'Джентльмены', 'Однажды в Ирландии',
    'Тор', 'Тор 2', 'Капитан Америка', 'Ворошиловский стрелок', 'Брат', 'Ночь в музее'
]
favorite_films = []

# Напишите программу, которая позволяет добавлять в свой рейтинг фильмы, удалять их оттуда,
# а также вставлять на нужное пользователю место. Обеспечьте контроль ввода и сделайте так,
# чтобы в список нельзя было добавить один и тот же фильм несколько раз.

def action_add(favorite_films, film_name):
    if film_name not in favorite_films:
        favorite_films.append(film_name)
    else:
        print('Фильм уже добавлен в рейтинг!')


def action_insert(favorite_films, film_name):
    if film_name not in favorite_films:
        i_film = int(input('На какое место поставим этот фильм? '))
        favorite_films.insert(i_film - 1, film_name)
    else:
        print('Фильм уже добавлен в рейтинг!')


def action_remove(favorite_films, film_name):
    if film_name not in favorite_films:
        print('Этого фильма нет в вашем рейтинге!')
    else:
        favorite_films.remove(film_name)


while True:
    print('\nВаш текущий рейтинг фильмов:', favorite_films)
    film_name = input('Название фильма: ')
    if film_name not in films:
        print('Фильма нет на сайте...')
    else:
        print('\nКоманды: добавить, вставить, удалить.')
        action = input('Введите команду: ')
        if action == 'Добавить' or action == 'добавить':
            action_add(favorite_films, film_name)
        elif action == 'Вставить' or action == 'вставить':
            action_insert(favorite_films, film_name)
        elif action == 'Удалить' or action == 'удалить':
            action_remove(favorite_films, film_name)
        else:
            print('Неправильная команда, повторите ввод.')



********************************************************************************

print('Задача 3. Пакеты')

# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых
# равно нулю или единице. Эти числа называются битами. Иногда в кодировке сообщения
# встречаются ошибки, и в пакете эта ошибка обозначается числом -1. Если таких ошибок не
# больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе
# отбрасываем.

# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран
# итоговое сообщение для декодирования, а также количество ошибок в нём и количество
# необработанных пакетов.

number = int(input('\nВведите количество пакетов для обработки: '))
common_package = []
bad_package_counter = 0

for i in range(number):
    temp_package = []
    print(f'\nВведите {i + 1} пакет:')
    for bit in range(4):
        temp_package.append(int(input(f'Введите значение {bit + 1} бита: ')))
    if temp_package.count(-1) < 2:
        common_package.extend(temp_package)
    else:
        bad_package_counter += 1

print('\nИтоговое сообщение для декодирования:', common_package)
print('Кол-во ошибок в сообщении', common_package.count(-1))
print('Кол-во необработанных пакетов:', bad_package_counter)


********************************************************************************

print('Задача 2. Вредоносное ПО')

# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.

# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных
# символов ! и ?. Напишите программу, которая считает количество этих символов отдельно
# в первой строке и отдельно во второй. Если в первой строке их больше, чем во второй,
# то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».

string_1 = input('Введите первую строку: ')
string_2 = input('Введите вторую строку: ')

marks_1 = string_1.count('?') + string_1.count('!')
marks_2 = string_2.count('?') + string_2.count('!')

if marks_1 >= marks_2:
    print(string_1 + ' ' + string_2)
else:
    print(string_2 + ' ' + string_1)


********************************************************************************

print('Задача 1. Зоопарк')

# В маленьком зоопарке каждое животное сидит в отдельной клетке,
# всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

# Сегодня в зоопарк завезли медведя (bear) и посадили его между
# львом и кенгуру. В итоге животных стало пять. А через неделю
# слона перевезли в другое место и в списке снова стало
# четверо животных.

# Реализуйте эти действия в коде программы и выведите в консоль
# итоговый список животных, а также покажите, в какой клетке сидят
# лев и обезьяна. Для этого используйте методы списков.

zoo.insert(1, 'bear')
zoo.remove('elephant')
print('Зоопарк:', zoo)
print(f'Лев сидит в клетке {zoo.index("lion") + 1}')
print(f'Обезьяна сидит в клетке {zoo.index("monkey") + 1}')


********************************************************************************

print('Задача 1. Задачи компаний')

# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый
# список, а также выведите количество невыполненных задач.

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Основной список задач после объединения:', main)
print('Невыполненных задач:', main.count(0))


********************************************************************************

print('Задача 3. Лавка')

# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится
# в одном большом списке, вот так:

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!

# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это
# запрашивается у пользователя), а затем увеличивает цены всех фруктов на 8%.

new_fruit = [input('Введите новый фрукт: '), int(input('Какая цена: '))]
goods.append(new_fruit)

print('\nНовый ценник на фрукты:')
for i_fruit in goods:
    i_fruit[1] = round(i_fruit[1] * 1.08, 2)
    print(i_fruit[0], '-', i_fruit[1])




********************************************************************************

print('Задача 1. Матрица')
# Дан вот такой список со списками:
matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.

for i_list in matrix:
    for i_num in i_list:
        print(i_num, end = ' ')
    print()
    

********************************************************************************

print('Задача 2. Олимпиада')
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются
# под номерами 1, 2, 3, 4 и так далее до N. Эти участники поделены на команды по K человек.

# Напишите программу, которая принимает на вход количество участников и количество человек
# в каждой команде, затем генерирует список таких команд и выводит его на экран.

# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.

members = int(input('Сколько человек участвует в олимпиаде: '))
teams = int(input('На сколько команд разделены все участники: '))
members_arrange = []
num = 1
if members % teams != 0:
    print('Не удалось разделить всех участников на равные команды!')
else:
    for i_team in range(teams):
        members_arrange.append(list(range(num, num + members//teams)))
        num += members//teams

    print('Общая раскладка участников по командам:', members_arrange )



********************************************************************************

print('Задача 1. Задачи компаний')

# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый
# список, а также выведите количество невыполненных задач.

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Основной список задач после объединения:', main)
print('Невыполненных задач:', main.count(0))


********************************************************************************

print('Задача 3. Кино')

# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли
# создать собственный рейтинг фильмов из тех, которые есть на сайте. Вот сам список фильмов
# (конечно же, можете брать свои):

films = [
    'Крепкий орешек', 'Назад в будущее', 'Леон', 'Богемская рапсодия',
    'Проклятый остров', 'Начало', 'Матрица', 'Джентльмены', 'Однажды в Ирландии',
    'Тор', 'Тор 2', 'Капитан Америка', 'Ворошиловский стрелок', 'Брат', 'Ночь в музее'
]
favorite_films = []

# Напишите программу, которая позволяет добавлять в свой рейтинг фильмы, удалять их оттуда,
# а также вставлять на нужное пользователю место. Обеспечьте контроль ввода и сделайте так,
# чтобы в список нельзя было добавить один и тот же фильм несколько раз.

def action_add(favorite_films, film_name):
    if film_name not in favorite_films:
        favorite_films.append(film_name)
    else:
        print('Фильм уже добавлен в рейтинг!')


def action_insert(favorite_films, film_name):
    if film_name not in favorite_films:
        i_film = int(input('На какое место поставим этот фильм? '))
        favorite_films.insert(i_film - 1, film_name)
    else:
        print('Фильм уже добавлен в рейтинг!')


def action_remove(favorite_films, film_name):
    if film_name not in favorite_films:
        print('Этого фильма нет в вашем рейтинге!')
    else:
        favorite_films.remove(film_name)


while True:
    print('\nВаш текущий рейтинг фильмов:', favorite_films)
    film_name = input('Название фильма: ')
    if film_name not in films:
        print('Фильма нет на сайте...')
    else:
        print('\nКоманды: добавить, вставить, удалить.')
        action = input('Введите команду: ')
        if action == 'Добавить' or action == 'добавить':
            action_add(favorite_films, film_name)
        elif action == 'Вставить' or action == 'вставить':
            action_insert(favorite_films, film_name)
        elif action == 'Удалить' or action == 'удалить':
            action_remove(favorite_films, film_name)
        else:
            print('Неправильная команда, повторите ввод.')



********************************************************************************

print('Задача 1. Матрица')
# Дан вот такой список со списками:
matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.

for i_list in matrix:
    for i_num in i_list:
        print(i_num, end = ' ')
    print()
    

********************************************************************************

print('Задача 3. Лавка')

# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится
# в одном большом списке, вот так:

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!

# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это
# запрашивается у пользователя), а затем увеличивает цены всех фруктов на 8%.

new_fruit = [input('Введите новый фрукт: '), int(input('Какая цена: '))]
goods.append(new_fruit)

print('\nНовый ценник на фрукты:')
for i_fruit in goods:
    i_fruit[1] = round(i_fruit[1] * 1.08, 2)
    print(i_fruit[0], '-', i_fruit[1])




********************************************************************************

print('Задача 2. Олимпиада')
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются
# под номерами 1, 2, 3, 4 и так далее до N. Эти участники поделены на команды по K человек.

# Напишите программу, которая принимает на вход количество участников и количество человек
# в каждой команде, затем генерирует список таких команд и выводит его на экран.

# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.

members = int(input('Сколько человек участвует в олимпиаде: '))
teams = int(input('На сколько команд разделены все участники: '))
members_arrange = []
num = 1
if members % teams != 0:
    print('Не удалось разделить всех участников на равные команды!')
else:
    for i_team in range(teams):
        members_arrange.append(list(range(num, num + members//teams)))
        num += members//teams

    print('Общая раскладка участников по командам:', members_arrange )



********************************************************************************

print('Задача 2. Вредоносное ПО')

# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.

# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных
# символов ! и ?. Напишите программу, которая считает количество этих символов отдельно
# в первой строке и отдельно во второй. Если в первой строке их больше, чем во второй,
# то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».

string_1 = input('Введите первую строку: ')
string_2 = input('Введите вторую строку: ')

marks_1 = string_1.count('?') + string_1.count('!')
marks_2 = string_2.count('?') + string_2.count('!')

if marks_1 >= marks_2:
    print(string_1 + ' ' + string_2)
else:
    print(string_2 + ' ' + string_1)


********************************************************************************

print('Задача 3. Пакеты')

# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых
# равно нулю или единице. Эти числа называются битами. Иногда в кодировке сообщения
# встречаются ошибки, и в пакете эта ошибка обозначается числом -1. Если таких ошибок не
# больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе
# отбрасываем.

# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран
# итоговое сообщение для декодирования, а также количество ошибок в нём и количество
# необработанных пакетов.

number = int(input('\nВведите количество пакетов для обработки: '))
common_package = []
bad_package_counter = 0

for i in range(number):
    temp_package = []
    print(f'\nВведите {i + 1} пакет:')
    for bit in range(4):
        temp_package.append(int(input(f'Введите значение {bit + 1} бита: ')))
    if temp_package.count(-1) < 2:
        common_package.extend(temp_package)
    else:
        bad_package_counter += 1

print('\nИтоговое сообщение для декодирования:', common_package)
print('Кол-во ошибок в сообщении', common_package.count(-1))
print('Кол-во необработанных пакетов:', bad_package_counter)


********************************************************************************

print('Задача 3. Корень диска')

import os

get_path = os.path.abspath('..')
print('Текущая папка:', get_path)
print('Корень диска:', os.path.join(get_path.split(os.path.sep)[0]) + os.path.sep)



********************************************************************************

speakers_file = open('speakers.txt', 'r', encoding='utf-8')
sym_count = []
for i_line in speakers_file:
    print(i_line, end='')
    sym_count.append(str(len(i_line)))
print()
sym_count_str = '\n'.join(sym_count)
speakers_file.close()
print(sym_count_str)

counts_file = open('sym_count.txt', 'w')
counts_file.write(sym_count_str)
counts_file.write('\n' + str(50))
counts_file.close()

********************************************************************************

print('Задача 1. Иконки')

import os

# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться
# вся структура его диска: папки одними иконками, файлы — другими. Поэтому ему нужен код,
# который поможет определить, какой тип иконки вставить.

# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает
# этот путь (на директорию, файл, или же путь является ссылкой), и выведите соответствующее
# сообщение. Если путь указывает на файл, то также выведите его размер (сколько он весит в
# байтах). Обеспечьте контроль ввода: проверка пути на существование.

# Подсказка: для вывода размера файла поищите соответствующий метод.

path = input('\nВведите путь к объекту: ')

if os.path.exists(path):
    if os.path.isdir(path):
        print('Это директория.')
    elif os.path.isfile(path):
        print('Это файл, его размер:', os.path.getsize(path), 'байт.')
    else:
        print('Это не файл и не директория.')
else:
    print('Объект не найден')


********************************************************************************

print('Задача 2. Всё в одном')

import os

# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком
# в другой город, и там у него случилась беда: его диск пришлось отформатировать,
# а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом
# все решения и скрипты, которые у вас сейчас есть.

# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic
# в файл scripts.txt, разделяя код строкой из 40 символов *.


def find_file(cur_path, ending):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(ending):
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, ending)
            if result:
                all_paths.extend(result)

    return all_paths


def get_text_from_file(path_to_file):
    file = open(path_to_file, "r", encoding="utf8")
    result = ""
    for line in file:
        result += line
    return result


all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic

file_result = open("scripts.txt", "w", encoding="utf8")

for file_path in all_py_files:
    file_result.write(get_text_from_file(file_path))
    file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)


********************************************************************************

print('Задача 2. Поиск файла 2')

import os
import random


# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны
# только программисту. Таким образом, с ними можно работать точно так же, как
# и с обычными текстовыми файлами.

# Используя функцию поиска файла из предыдущего урока, реализуйте программу,
# которая находит внутри указанного пути все файлы с искомым названием и
# выводит на экран текст одного из них (выбор можно сгенерировать случайно).

# Подсказка: можно использовать, например, список для сохранения найденного пути.

def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths


def check_file_inside(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line)
    file.close()


all_paths = find_file('..', 'Task_2_1.py')
check_file_inside(random.choice(all_paths))


********************************************************************************

print('Задача 1. Результаты')

import os
import random

# Одному программисту дали задачу для обработки неких результатов тестирования
# двух групп людей. Файл первой группы (group_1.txt) находится в папке task,
# файл второй группы (group_2.txt) — в папке Additional_info.

# На экран нужно было вывести сумму очков первой группы, затем разность очков
# опять же первой группы и напоследок — произведение очков уже второй группы.

# Программист оказался не очень опытным, писал код наобум и даже не стал его
# проверять. И оказалось, этот код просто не работает.

file = open('C:\\learn_work\\task\\group_1.txt', 'r', encoding='utf-8')
summa = 0
diff = 0
for i_line in file:
    info = i_line.split()
    summa += int(info[2])
    diff -= int(info[2])
print('Сумма очков первой группы:', summa)
print('Разность очков первой группы:', diff)

file.close()

file_2 = open('C:\\learn_work\\task\\Additional_info\\group_2.txt', 'r', encoding='utf-8')
compose = 1
for i_line in file_2:
    info = i_line.split()
    compose *= int(info[2])

print('Произведение очков второй группы:', compose)
file_2.close()


********************************************************************************

print('Задача 2. Поиск файла')

import os


# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах
# указанной директории. Однако, как мы понимаем, файлов с таким названием может
# быть несколько.

# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя
# файла, проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные
# пути с этим именем.

def find_file(cur_path, file_name):

    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            return path
        if os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                print('Абсолютный путь к файлу:', result)
    else:
        result = None

    return result


common_dir = input('Введите область для поиска: ')
file_name = input('Введите имя файла: ')

file_path = find_file(common_dir, file_name)

********************************************************************************

import os


def find_file(cur_path, file_name):
    print('Переходим в', cur_path)
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        print('\tСмотрим', path)
        if file_name == i_elem:
            all_paths.append(os.path.abspath(path))
        if os.path.isdir(path):
            print('Это директория')
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths


file_path = find_file(os.path.abspath
                      (os.path.join('..', '..', '..')),
                      'Task_2_1.py')
history_file = open('search_history.txt', 'a')

if file_path:
    for i_file in file_path:
        history_file.write('\n' + i_file)
        print('Абсолютный путь к файлу:', i_file)
else:
    print('Файл не найден.')


********************************************************************************

print('Задача 2. Содержимое')

import os


path_to_project = os.path.abspath(os.path.join('..', '..', 'Skillbox'))
print('\nСодержание директории', path_to_project)
for i_elem in os.listdir(path_to_project):
    path = os.path.join(path_to_project, i_elem)
    print('\t', path)



********************************************************************************

import os

folder_name = 'project'
file_name = 'my_file.txt'

path = 'docs/{folder}/{file}'.format(
    folder=folder_name,
    file=file_name,
)

print(path)


rel_path = os.path.join('docs', folder_name, file_name)
print(rel_path)

abs_path = os.path.abspath(file_name)

print(abs_path)

********************************************************************************

import os

print('Поиск файла')


def find_file(cur_path, file_name):
    print('Переходим в', cur_path)

    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        print('\tСмотрим', path)
        if file_name == i_elem:
            return path
        if os.path.isdir(path):
            print('Это директория')
            result = find_file(path, file_name)
            if result:
                break
    else:
        result = None

    return result


file_path = find_file(os.path.abspath
                      (os.path.join('..', '..', '..', '..', 'learn_work')),
                      'Lesson_9_2_1.py')
if file_path:
    print('Абсолютный путь к файлу:', file_path)
else:
    print('Файл не найден.')


********************************************************************************

print('Задача 1. Сумма чисел')

# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.

numbers_file = open('numbers.txt', 'r')
summa = 0
for i_line in numbers_file:
    summa += int(i_line)
numbers_file.close()
answers = open('answers.txt', 'w')
answers.write(str(summa))
answers.close()



********************************************************************************

print('Задача 1. Сисадмин')

import os

folder_name = 'access'
file_name = 'admin.bat'


abs_path = os.path.abspath(os.path.join(folder_name, file_name))
print('Абсолютный путь до файла:', abs_path)

rel_path = os.path.join('..', folder_name, file_name)
print('Относительный путь до файла:', rel_path)

********************************************************************************

import os


def print_dirs(project):
    print('\nСодержание директории', project)
    if os.path.exists(project):
        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('   ', path)
    else:
        print('Каталога проекта не существует.')


projects_list = ['Python_Basic_Training', 'Skillbox', 'Python_Advanced']
for i_project in projects_list:
    path_to_project = os.path.abspath(os.path.join('..', '..', i_project))
    print_dirs(path_to_project)


********************************************************************************

speakers_file = open('speakers.txt', 'r', encoding='utf-8')
# data = speakers_file.read()
# print(data)
for i_line in speakers_file:
    print(i_line, end='')
speakers_file.close()

********************************************************************************

print('Задача 1. Пунктуация')

punctuation_set = set('.,;:!?')

text = input('Введите текст: ')
count = 0

for symbol in text:
    if symbol in punctuation_set:
        count += 1
print('Количество знаков пунктуации:', count)

********************************************************************************

print('Задача 1. Склады')

# У мебельного магазина есть два склада, на которых хранятся разные категории
# товаров по парам «название — количество»:

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000
}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600
}

# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage).
# После этого нас попросили реализовать поиск по товарам.

# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем
# запрашивает у пользователя название товара и выводит на экран его количество.
# Если такого товара нет, то выводит об этом ошибку. Для получения значения
# используйте метод get.

big_storage.update(small_storage)
item = input('Введите название товара: ')
if big_storage.get(item) is None:
    print('Товара нет в списке.')
else:
    print(item, '-', big_storage[item])


********************************************************************************

print('Задача 2. Кризис фруктов')

# Мы работаем в одной небольшой торговой компании, где все данные о продажах
# фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}
# В компании наступил небольшой кризис, и нам поручено провести небольшой
# анализ дохода.

# Напишите программу, которая находит общий доход, затем выводит фрукт с
# минимальным доходом и удаляет его из словаря. Выведите итоговый словарь
# на экран.

print('Общий доход:', sum(incomes.values()))
min_fruit = ''
for fruit in incomes:
    if incomes[fruit] == min(incomes.values()):
        min_fruit = fruit
        print(f'Минимальный доход у {fruit} {incomes.get(fruit)}')
incomes.pop(min_fruit)

print('Итоговый словарь:', incomes)


********************************************************************************

print('Задача 1. Член семьи')

# Дана структура, которая содержит описание одного из членов семьи
# (имя, фамилия, хобби, сколько лет и дети):

family_member = {
    'name': 'Jane',
    'surname': 'Doe',
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}

# Напишите программу, которая реализует такую структуру: имя, фамилия,
# хобби, кол-во лет и дети. Затем, с помощью метода get и установки
# значения по умолчанию, проверьте есть ли ребёнок с именем Bob. Затем
# в отдельную переменную получите фамилию этого ребёнка и выведите её
# на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

children_dict = {}
for child in family_member["children"]:
    children_dict[child["name"]] = child["age"]

search_bob = children_dict.get("Bob", None)
if search_bob:
    print("Bob найден")
else:
    print("Bob-а нету!")

children_surname = family_member.get("surname", None)
if children_surname:
    print(children_surname)
else:
    print("No surname")


********************************************************************************

print('Задача 2. Семинар')
import random
# На одном семинаре по теории множеств нужно показать наглядный пример,
# как эти множества работают. Для начала было сгенерировано два набора чисел:

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

# Вас попросили написать программу, которая будет наглядно демонстрировать
# работу со множествами с помощью этих чисел.
#
# Напишите программу, которая преобразует списки во множества и убирает
# повторяющиеся элементы. Затем удаляет минимальный элемент из каждого
# множества и добавляет туда случайное число в диапазоне от 100 до 200.
# Затем выполните следующие действия со множествами:
#
# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
nums_1 = set(nums_1)
nums_2 = set(nums_2)
nums_1.remove(min(nums_1))
nums_1.add(random.randint(100, 200))
nums_2.remove(min(nums_2))
nums_2.add(random.randint(100, 200))

print('Первый набор:', nums_1)
print('Второй набор:', nums_2)
print('\nРезультаты:')
print('1. Объединение множеств:', nums_1|nums_2)
print('2. Пересечение множеств:', nums_1.intersection(nums_2))
print('3. Элементы второго набора, не входящие в первый:', nums_2 - nums_1)


********************************************************************************

print('Задача 3. Различные цифры')

# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве
# намного быстрее, чем в списке).

# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'

text = {symbol for symbol in input('Введите строку: ')}
digits = {str(i) for i in range(0, 10)}

print('Различные цифры строки:', ''.join(sorted(digits.intersection(text))))



********************************************************************************

print('Задача 3. Контакты')


# Энтузиаст Степан, купив новый телефон, решил написать для него
# свою собственную операционную систему. И, конечно же, первое,
# что он захотел в ней реализовать, — это телефонная книга.

# Напишите программу, которая запрашивает у пользователя имя
# контакта и номер телефона, добавляет их в словарь и выводит
# на экран текущий словарь контактов. Запрос на добавление
# идёт бесконечно (но можно задать своё условие для завершения
# программы). Обеспечьте контроль ввода: если это имя уже есть
# в словаре, то выведите соответствующее сообщение.

def new_contact():
    name = input('\nВведите имя: ')
    if name in phone_book:
        print('Такой контакт уже существует...')
    else:
        phone_book[name] = input('Введите номер: ')
    return phone_book


phone_book = {}
while True:
    print('\nТекущие контакты на телефоне:')
    if phone_book:
        for i_name in phone_book:
            print(i_name, phone_book[i_name])
    else:
        print('<Пусто>')
    new_contact()


********************************************************************************

print('Задача 3. Гистограмма частоты')


# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных
# будет строиться гистограмма частоты букв.

# Напишите программу, которая получает сам текст и считает, сколько раз в строке
# встречается каждый символ. На экран нужно вывести содержимое в виде таблицы,
# отсортированное по алфавиту, а также максимальное значение частоты.


def histogram(text):
    hist_dict = {}
    for sym in text:
        if sym in hist_dict:
            hist_dict[sym] += 1
        else:
            hist_dict[sym] = 1
    return hist_dict


text = input('Введите текст: ').lower()
text_histogram = histogram(text)

for sym in sorted(text_histogram):
    print(sym, '-', text_histogram[sym])

print('Максимальное значение частоты:', max(text_histogram.values()))


********************************************************************************

print('Задача 1. Словарь квадратов чисел')

# На вход программе поступает целое число num. Напишите программу создания
# словаря, который включает в себя ключи от 1 до num, а значениями
# соответствующего ключа будет значение ключа в квадрате.

square_dict = {}
for i in range(1, int(input('Введите число N: ')) + 1):
    square_dict[i] = i**2
print('Таблица квадратов:', square_dict)


********************************************************************************

print('Задача 2. Студент')

# Пользователь вводит фамилию, имя студента, город проживания,
# вуз, в котором он учится, и все его оценки. Всё вводится в
# одну строку через пробел. Напишите программу, которая по
# этой информации составит словарь и выведет его на экран.

student_info = input('Введите информацию о студенте: \nИмя, фамилия, город, вуз, оценки: ').split()

students = {'Имя': student_info[0], 'Фамилия': student_info[1], 'Город': student_info[2],
            'Место учебы': student_info[3], 'Оценки': []}
for i_grade in student_info[4:]:
    students['Оценки'].append(int(i_grade))

for i_info in students:
    print(i_info, '-', students[i_info])


********************************************************************************

print('Задача 2. Игроки')

# Есть готовый словарь игроков, у каждого игрока есть имя, команда,
# в которой он играет, а также его текущий статус, в котором указано,
# отдыхает он, тренируется или путешествует:

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
}
status_dict = {
    'Rest': 'отдыхают',
    'Training': 'тренируются',
    'Travel': 'путешествуют'
}

teams_list = ['A', 'B', 'C']

# Напишите программу, которая выводит на экран вот такие данные в разных строчках:

# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.
# Все члены команды из команды А, которые отдыхают.

for index, state in enumerate(status_dict):
    print(f"Все члены команды из команды {teams_list[index]}, которые {status_dict[state]}:")
    for _, player in players_dict.items():
        if player["status"] == state and player["team"] == teams_list[index]:
            print(player["name"])


********************************************************************************

print('Задача 1. Ошибка')

# В одном проекте на 10 000 строк кода произошла критическая ошибка.
# Хорошо, что старший разработчик быстро её нашёл и исправил. Он решил
# проверить, смогли бы вы её исправить, если бы его не было на месте.
# Поэтому он написал для вас код с аналогичной ошибкой:

import random


def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}
change_dict(common_dict)
print(common_dict)
print(nums_list)

# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения
# которых равны ранее объявленным переменным. Затем вызывается функция, которая
# должна изменять значения словаря, добавляя к значениям случайное число, в
# зависимости от типа данных. Но при этом меняются и ранее объявленные переменные.
# Исправьте эту ошибку и убедитесь, что nums_list, some_dict и uniq_nums не меняются.





********************************************************************************

print('Задача 1. Challenge')

# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то,
# что только что узнал. И в этот раз он подумал реализовать подсчёт факториала без
# использования циклов.

# Напишите функцию, которая считает факториал числа с помощью рекурсии.

# Кстати, в Python есть ограничение на количество рекурсивных вызовов. Попробуйте
# передать своей функции, например, число 1000 и посмотрите, что будет.


def factorial(num):
    if num == 1:
        return 1
    num_minus_1 = factorial(num - 1)
    return num * num_minus_1

number = int(input('Введите число: '))
print(f'Факториал числа {number} равен:', factorial(number))

********************************************************************************

print('Задача 1. Работа с файлом')

# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию,
# которая может принимать на вход три аргумента: вопрос пользователю (на
# который нужно ответить да или нет), сообщение о неправильном вводе и
# количество попыток. Вопрос — обязательный позиционный аргумент, остальные —
# со значениями по умолчанию. При корректном ответе функция может возвращать
# что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».

# В основной программе вызовите функцию минимум три раза: только с вопросом,
# с вопросом и сообщением об ошибке, с вопросом и количеством попыток.


def file_close_quiz(question, complaint='Неверный ввод. Пожалуйста, введите да или нет. ', retries=4):
    while True:
        answer = input(question).lower()
        if answer == 'да':
            return 1
        if answer == 'нет':
            return 0
        retries -= 1
        if retries == 0:
            print('Количество попыток истекло.')
            break
        print(complaint)
        print('Осталось попыток:', retries)

file_close_quiz('Вы действительно хотите выйти? ')
file_close_quiz('Удалить файл? ', 'Так удалить или нет? ')
file_close_quiz('Записать файл? ', retries=1)

********************************************************************************

print('Задача 3. Поиск элемента')

# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо
# пройтись по ней и найти нужный элемент. Для этого в программировании используются
# специальные алгоритмы поиска.

# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт
# значение этого ключа на экран. В качестве примера можно использовать такой словарь:

site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}


def key_search(key, site):
    if key in site:
        return site[key]

    for i_site in site.values():
        if isinstance(i_site, dict):
            result = key_search(key, i_site)
            if result:
                break
    else:
        result = None
    return result


key = input('Какой ключ Вы хотите найти? ')
if key_search(key, site) is None:
    print('Ключ не найден.')
else:
    print('Значение ключа: ', key_search(key, site))

********************************************************************************

print('Задача 2. Непонятно!')

# Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами,
# ссылками, объектами и их id. Видя, как он мучается, вы решили помочь ему
# и объяснить эту тему наглядно.

# Пользователь вводит любой объект. Напишите программу, которая выводит на
# экран тип введённых данных, информацию о его изменяемости, а также id
# этого объекта.

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество"
}

mutable_check_helper = {
    "mutable": ("словарь", "список", "множество")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_in = 'привет'
check_info(data_in)


********************************************************************************

print('Задача 2. Накопление значений')


# При работе со значениями по умолчанию и изменяемыми типами данных нужно
# знать и остерегаться ещё одной интересной штуки.

# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой. В теле функции в список добавляется
# число num и сам список выводится на экран.

def add_num(num, nums=None):
    nums = nums
    if not nums:
        nums = []
    nums.append(num)
    print(nums)


add_num(5)
add_num(10)
add_num(15)


********************************************************************************

print('Задача 2. Степень числа')


# На одном из форумов, посвящённых программированию, пользователь выложил
# такой код для расчёта степени числа без использования циклов, ** и функции math.pow():

def power(a, n):
    if n == 1:
        return a
    return a * power(a, n - 1)


float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))
print(float_num, '**', int_num, '=', power(float_num, int_num))

# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки.
# Исправьте это решение, не используя циклы, возведение в степень через ** и функцию math.pow()


********************************************************************************

print('Задача 3. Помощь другу')


# Нашего друга попросили написать функцию, которая на вход принимает список
# всякого мусора. Ему нужно подготовить из этого списка список словарей,
# чтобы его коллеги смогли дальше продолжить обработку данных. Вот список
# правил, что нужно сделать с изначальным списком:

# Если в списке встретился словарь, то оставляем его.

# Если в списке встретилась строка, то из неё нужно сделать словарь и положить
# его в итоговый список, например  “abc” → {“abc”: “abc”}.

# С числами нужно сделать то же самое, что и со строками.

# Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :(
# Нужна ваша помощь, вот сама программа:


# def create_dict(data, template=dict()):
def create_dict(data):
    if isinstance(data, dict):
        return data

    if isinstance(data, int) \
            or isinstance(data, float) \
            or isinstance(data, str):
        return {data: data}

    if isinstance(data, set) or isinstance(data, list):
        return None


def data_preparation(old_list):
    new_list = []

    for i_element in old_list:
        if create_dict(i_element) is not None:
            new_list.append(create_dict(i_element))

    return new_list


data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
data = data_preparation(data)
print(data)


********************************************************************************

print('Задача 2. Кратность')
# Пользователь вводит список из N чисел и число K. Напишите код, выводящий на экран сумму
# индексов элементов списка, которые кратны K.

quantity = int(input('Введите количество чисел в списке: '))
divider = int(input('Введите делитель: '))
num_list = []
sum_count = 0
i = 0

for _ in range(quantity):
    num = int(input('Введите число из списка: '))
    num_list.append(num)
print(num_list)

for number in num_list:
    if number % divider == 0:
        print(f'Индекс числа {number} - {i}')
        sum_count += i
    i += 1
print('Сумма индексов:', sum_count)


********************************************************************************

print('Задача 2. Кратность')
# Пользователь вводит список из N чисел и число K. Напишите код, выводящий на экран сумму
# индексов элементов списка, которые кратны K.

quantity = int(input('Введите количество чисел в списке: '))
divider = int(input('Введите делитель: '))
num_list = []
sum_count = 0
i = 0

for _ in range(quantity):
    num = int(input('Введите число из списка: '))
    num_list.append(num)
print(num_list)

for number in num_list:
    if number % divider == 0:
        print(f'Индекс числа {number} - {i}')
        sum_count += i
    i += 1
print('Сумма индексов:', sum_count)


********************************************************************************

print('Задача 1. Таблица степеней')

# Аркадий как-то раз написал программу для вывода таблицы степеней для определённых чисел.
# Недавно он узнал про такую штуку, как списки, и решил программу немного переписать,
# а заодно усовершенствовать её. По его задумке, вначале есть всего три числа:
# 3, 7 и 5, а затем с помощью бесконечного цикла программа запрашивает новое число,
# закидывает его в конец текущего списка чисел и выводит вторую, третью и четвёртую
# степень каждого числа текущего списка. Вот какая программа получилась у Аркадия:

numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)
    print()

# Однако, к сожалению, эта программа у него не заработала. Помогите Аркадию исправить ошибки в коде.
# Убедитесь, что программа работает верно.


********************************************************************************

print('Задача 3. Собачьи бега')

# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки. Однако при выводе был обнаружен баг:
# собаки с наибольшим и наименьшим количеством очков поменялись местами! Нужно это исправить.
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

numbers = int(input('Введите количество собак в сезоне: '))
scores = []
print()

for i in range(numbers):
    score = int(input(f'Введите очки {i + 1} собаки: '))
    scores.append(score)

maximum = scores[0]
minimum = scores[0]
i = 0
max_i = min_i = 0

for num in scores:
    if maximum < num:
        maximum = num
        max_i = i
    if minimum > num:
        minimum = num
        min_i = i
    i += 1

scores[max_i] = minimum
scores[min_i] = maximum
i = 0
print()

for score in scores:
    print(f'Очки собаки {i + 1} равны {score}')
    i += 1


********************************************************************************

print('Задача 3.Контроль')
# В любой компании есть список сотрудников. Руководство одной компании хочет знать,
# на рабочем месте ли сейчас сотрудник.
# У каждого сотрудника есть пропуск со своим ID - номером(это положительное число),
# список активных пропусков сотрудников известен заранее.
# Напишите программу, которая сначала запрашивает у пользователя количество сотрудников
# в офисе, ID их пропусков, а затем запрашивает ID пропуска, который нужно найти в этом
# списке. Если такой есть, то вывести «Сотрудник на месте», а иначе «Сотрудник не работает!».

employee = int(input('Введите количество сотрудников в офисе: '))
id_list = []

for _ in range(employee):
    employee_id = int(input('Введите ID сотрудника, который прошел в офис: '))
    id_list.append(employee_id)

while True:
    id_check = int(input('\nВведите ID сотрудника для проверки: '))
    if id_check not in id_list:
        print('Сотрудник сегодня на удаленке.')
    else:
        print('Сотрудник на месте.')



********************************************************************************

print('Задача 1. Гугл')

# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать для своей программы,
# чтобы не изобретать велосипед. Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке. Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))
for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)
maximum = nums_list[0]
minimum = nums_list[0]
for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i
print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)

# Однако он столкнулся с проблемой. Если брать, к примеру, количество чисел 5,
# то на тестах -1 -2 -3 -4 -5 и 1 2 3 4 5 программа выводит неверный результат.
#
# Доработайте программу так, чтобы она выводила верный результат. Подсказка: для отладки используйте точки останова.


********************************************************************************

print('Задача 3. Улучшенная лингвистика')

# Мы уже писали программу для лингвистов, которая считала количество определённых
# букв в тексте. Теперь эту программу нужно улучшить. Есть список из трёх слов,
# которые вводит пользователь. Затем вводится сам текст произведения строго по
# словам. Текст вводится до тех пор, пока не встретится слово end. Напишите программу,
# которая посчитает, сколько раз слова пользователя встречаются в тексте.

check_words = []
word = ''
counts = [0, 0, 0]

for i in range(3):
    word = input(f'Введите {i + 1} слово для поиска: ')
    check_words.append(word)

while True:
    word = input('Введите слово из текста: ')
    if word == 'end':
        break
    else:
        for index in range(3):
            if word == check_words[index]:
                counts[index] += 1

for index in range(3):
    print(check_words[index], counts[index])


********************************************************************************

print('Задача 1. Гугл')

# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать для своей программы,
# чтобы не изобретать велосипед. Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке. Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))
for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)
maximum = nums_list[0]
minimum = nums_list[0]
for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i
print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)

# Однако он столкнулся с проблемой. Если брать, к примеру, количество чисел 5,
# то на тестах -1 -2 -3 -4 -5 и 1 2 3 4 5 программа выводит неверный результат.
#
# Доработайте программу так, чтобы она выводила верный результат. Подсказка: для отладки используйте точки останова.


********************************************************************************

print('Задача 2. Соседи')


# Дана строка S и номер позиции символа в строке. Напишите программу, которая
# выводит соседей этого символа и сообщение о количестве таких же символов среди
# этих соседей: их нет, есть ровно один или есть два таких же.

def symbol_finder(symbols, number):
    sym_list = list(symbols)
    sym = sym_list[number - 1]
    sym_left = sym_list[number - 2]
    sym_right = sym_list[number]

    print('Символ слева:', sym_left)
    print('Символ справа:', sym_right)

    if sym == sym_left == sym_right:
        print('Два таких же символа!')
    elif sym == sym_left or sym == sym_right:
        print('Один такой же символ.')
    else:
        print('Похожих символов нет...')


while True:
    symbols = input('\nВведите строку: ')
    number = int(input('Введите номер символа: '))
    symbol_finder(symbols, number)


********************************************************************************

print('Задача 1. Текстовый редактор: возвращение')

# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь
# обычных пользователей чуть лучше. В этот раз у нас стоит задача сделать фишку с
# поиском и заменой символов в выделенной строчке. Например, человек что-то перечислял
# в тексте, но ошибся и вместо точек с запятой использовал двоеточия. Лингвисты негодуют.

# Пользователь вводит строку S. Напишите программу, которая заменяет в строке все двоеточия
# (:) на точки с запятой (;). Также подсчитайте количество замен и выведите ответ на экран
# (и новую строку тоже). Для решения используйте список.

print('Введите текст для редактирования:')
notes = input()
notes_list = list(notes)
print('Отредактированный текст:')
for sym in notes_list:
    if sym == ':':
        sym = ';'
    print(sym, end='')


********************************************************************************

print('Задача 2. Очень простая задача')

# У вас есть список numbers. Напишите программу, которая заполняет список числами от 0 до 100 и выводит его на экран.

numbers = []
for i in range(10):
    for j in range(10):
        numbers.append(10*i + j)
        print(10*i + j, end = '\t')
    print()
numbers.append(100)
print(100)

numbers_alternative = []
for i in range(101):
    numbers_alternative.append(i)
print('\n', numbers_alternative)

********************************************************************************

print('Задача 1. Текстовый редактор: возвращение')

# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь
# обычных пользователей чуть лучше. В этот раз у нас стоит задача сделать фишку с
# поиском и заменой символов в выделенной строчке. Например, человек что-то перечислял
# в тексте, но ошибся и вместо точек с запятой использовал двоеточия. Лингвисты негодуют.

# Пользователь вводит строку S. Напишите программу, которая заменяет в строке все двоеточия
# (:) на точки с запятой (;). Также подсчитайте количество замен и выведите ответ на экран
# (и новую строку тоже). Для решения используйте список.

print('Введите текст для редактирования:')
notes = input()
notes_list = list(notes)
print('Отредактированный текст:')
for sym in notes_list:
    if sym == ':':
        sym = ';'
    print(sym, end='')


********************************************************************************

print('Задача 3. Улучшенная лингвистика')

# Мы уже писали программу для лингвистов, которая считала количество определённых
# букв в тексте. Теперь эту программу нужно улучшить. Есть список из трёх слов,
# которые вводит пользователь. Затем вводится сам текст произведения строго по
# словам. Текст вводится до тех пор, пока не встретится слово end. Напишите программу,
# которая посчитает, сколько раз слова пользователя встречаются в тексте.

check_words = []
word = ''
counts = [0, 0, 0]

for i in range(3):
    word = input(f'Введите {i + 1} слово для поиска: ')
    check_words.append(word)

while True:
    word = input('Введите слово из текста: ')
    if word == 'end':
        break
    else:
        for index in range(3):
            if word == check_words[index]:
                counts[index] += 1

for index in range(3):
    print(check_words[index], counts[index])


********************************************************************************

print('Задача 3.Контроль')
# В любой компании есть список сотрудников. Руководство одной компании хочет знать,
# на рабочем месте ли сейчас сотрудник.
# У каждого сотрудника есть пропуск со своим ID - номером(это положительное число),
# список активных пропусков сотрудников известен заранее.
# Напишите программу, которая сначала запрашивает у пользователя количество сотрудников
# в офисе, ID их пропусков, а затем запрашивает ID пропуска, который нужно найти в этом
# списке. Если такой есть, то вывести «Сотрудник на месте», а иначе «Сотрудник не работает!».

employee = int(input('Введите количество сотрудников в офисе: '))
id_list = []

for _ in range(employee):
    employee_id = int(input('Введите ID сотрудника, который прошел в офис: '))
    id_list.append(employee_id)

while True:
    id_check = int(input('\nВведите ID сотрудника для проверки: '))
    if id_check not in id_list:
        print('Сотрудник сегодня на удаленке.')
    else:
        print('Сотрудник на месте.')



********************************************************************************

print('Задача 1. Таблица степеней')

# Аркадий как-то раз написал программу для вывода таблицы степеней для определённых чисел.
# Недавно он узнал про такую штуку, как списки, и решил программу немного переписать,
# а заодно усовершенствовать её. По его задумке, вначале есть всего три числа:
# 3, 7 и 5, а затем с помощью бесконечного цикла программа запрашивает новое число,
# закидывает его в конец текущего списка чисел и выводит вторую, третью и четвёртую
# степень каждого числа текущего списка. Вот какая программа получилась у Аркадия:

numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)
    print()

# Однако, к сожалению, эта программа у него не заработала. Помогите Аркадию исправить ошибки в коде.
# Убедитесь, что программа работает верно.


********************************************************************************

print('Задача 3. Собачьи бега')

# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки. Однако при выводе был обнаружен баг:
# собаки с наибольшим и наименьшим количеством очков поменялись местами! Нужно это исправить.
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

numbers = int(input('Введите количество собак в сезоне: '))
scores = []
print()

for i in range(numbers):
    score = int(input(f'Введите очки {i + 1} собаки: '))
    scores.append(score)

maximum = scores[0]
minimum = scores[0]
i = 0
max_i = min_i = 0

for num in scores:
    if maximum < num:
        maximum = num
        max_i = i
    if minimum > num:
        minimum = num
        min_i = i
    i += 1

scores[max_i] = minimum
scores[min_i] = maximum
i = 0
print()

for score in scores:
    print(f'Очки собаки {i + 1} равны {score}')
    i += 1


********************************************************************************

print('Задача 2. Соседи')


# Дана строка S и номер позиции символа в строке. Напишите программу, которая
# выводит соседей этого символа и сообщение о количестве таких же символов среди
# этих соседей: их нет, есть ровно один или есть два таких же.

def symbol_finder(symbols, number):
    sym_list = list(symbols)
    sym = sym_list[number - 1]
    sym_left = sym_list[number - 2]
    sym_right = sym_list[number]

    print('Символ слева:', sym_left)
    print('Символ справа:', sym_right)

    if sym == sym_left == sym_right:
        print('Два таких же символа!')
    elif sym == sym_left or sym == sym_right:
        print('Один такой же символ.')
    else:
        print('Похожих символов нет...')


while True:
    symbols = input('\nВведите строку: ')
    number = int(input('Введите номер символа: '))
    symbol_finder(symbols, number)


********************************************************************************

print('Задача 2. Очень простая задача')

# У вас есть список numbers. Напишите программу, которая заполняет список числами от 0 до 100 и выводит его на экран.

numbers = []
for i in range(10):
    for j in range(10):
        numbers.append(10*i + j)
        print(10*i + j, end = '\t')
    print()
numbers.append(100)
print(100)

numbers_alternative = []
for i in range(101):
    numbers_alternative.append(i)
print('\n', numbers_alternative)

********************************************************************************

